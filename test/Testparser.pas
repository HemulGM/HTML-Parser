unit Testparser;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, System.Generics.Collections, HTML.Parser, System.Contnrs,
  System.RegularExpressionsCore, System.StrUtils, System.Classes;

type

  // Test methods for class TDomTree
  TestTDomTree = class(TTestCase)
  strict private
    FDomTree: TDomTree;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;

  // Test methods for class TDomTreeNode
  TestTDomTreeNode = class(TTestCase)
  strict private
    FDomTreeNode: TDomTreeNode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestParse;
    procedure TestGetTagName;
    procedure TestGetAttrValue;
    procedure TestGetTextValue;
    procedure TestGetComment;
    procedure TestFindNode;
    procedure TestFindTagOfIndex;
    procedure TestGetPath;
    procedure TestFindPath;
  end;

  // Test methods for class TChildList
  TestTChildList = class(TTestCase)
  strict private
    FChildList: TDomTreeNodeList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;

  // Test methods for class TPrmRecList
  TestTPrmRecList = class(TTestCase)
  strict private
    FPrmRecList: TPrmRecList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;

implementation

procedure TestTDomTree.SetUp;
begin
  FDomTree := TDomTree.Create;
end;

procedure TestTDomTree.TearDown;
begin
  FDomTree.Free;
  FDomTree := nil;
end;

procedure TestTDomTreeNode.SetUp;
var
  DomTree: TDomTree;
begin
  DomTree := TDomTree.Create;
  FDomTreeNode := DomTree.RootNode;
  CheckEquals('Root', FDomTreeNode.Tag);
  CheckEquals('', FDomTreeNode.TypeTag);
  CheckEquals('', FDomTreeNode.AttributesTxt);
  CheckEquals('', FDomTreeNode.Text);

  CheckEquals(0, FDomTreeNode.Child.Count);
end;

procedure TestTDomTreeNode.TearDown;
begin
  FDomTreeNode.Free;
  FDomTreeNode := nil;
end;

procedure TestTDomTreeNode.TestParse;
var
  ReturnValue: Boolean;
  HtmlTxt: TStringList;
  tmp: string;
  tmpNode: TDomTreeNode;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');

  ReturnValue := FDomTreeNode.Parse(HtmlTxt.Text);
  CheckEquals(true, ReturnValue);
  //check <?
  CheckEquals('<?xml version="1.0" encoding="UTF-8"?>', FDomTreeNode.Child[0].Tag);
  CheckEquals('%s', FDomTreeNode.Child[0].Typetag);
  CheckEquals('', FDomTreeNode.Child[0].AttributesTxt);
  CheckEquals('', FDomTreeNode.Child[0].Text);
  //check multiline comment
  tmp :=
    '<!--  <link href="https://ozlotteries.r.worldssl.net/stylesheet/main.css" rel="stylesheet" type="text/css" > 1'#$D#$A'123-->';
  CheckEquals(tmp, FDomTreeNode.Child[2].Tag);
  //check Exceptions  contain any symbols
  tmp := 'Title "<!-- <'#39'this"/> --> '#39'document';
  tmpNode := FDomTreeNode.Child[3].child[0].child[0].child[0];
  CheckEquals(tmp, tmpNode.Text);
  tmpNode := FDomTreeNode.Child[3].child[1].child[1];
  CheckEquals('textarea', AnsiLowerCase(tmpNode.Tag));
  CheckEquals('This disabled field? don'#39't write here<123/>', tmpNode.child[0].Text);

  //check attributes
  tmpNode := FDomTreeNode.Child[3].child[1];
  CheckEquals('body', AnsiLowerCase(tmpNode.Tag));
  CheckEquals(true, tmpNode.Attributes.ContainsKey('class'));
  CheckEquals(true, tmpNode.Attributes.TryGetValue('class', tmp));
  CheckEquals('"default"', tmp);
  CheckEquals(true, tmpNode.Attributes.ContainsKey('bgcolor'));
  CheckEquals(true, tmpNode.Attributes.TryGetValue('bgcolor', tmp));
  CheckEquals(#39'blue'#39, tmp);
  tmpNode := FDomTreeNode.Child[3].child[1].child[1];
  CheckEquals('textarea', AnsiLowerCase(tmpNode.Tag));
  CheckEquals(true, tmpNode.Attributes.ContainsKey('disabled'));
  CheckEquals(false, tmpNode.Attributes.TryGetValue('class', tmp));
end;

procedure TestTDomTreeNode.TestGetTagName;
var
  ReturnValue: string;
  tmpNode: TDomTreeNode;
  HtmlTxt: TStringList;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');
  FDomTreeNode.Parse(HtmlTxt.Text);
  tmpNode := FDomTreeNode.Child[3].child[1].child[1];
  ReturnValue := tmpNode.GetTagName;
  CheckEquals('<textarea disabled cols="30" rows="5">', ReturnValue);
end;

procedure TestTDomTreeNode.TestGetAttrValue;
var
  ReturnValue: string;
  tmpNode: TDomTreeNode;
  HtmlTxt: TStringList;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');
  FDomTreeNode.Parse(HtmlTxt.Text);
  tmpNode := FDomTreeNode.Child[3].child[1].child[3];
  ReturnValue := tmpNode.GetAttrValue('id');
  CheckEquals('"maincontainer"', ReturnValue);
end;

procedure TestTDomTreeNode.TestGetTextValue;
var
  ReturnValue: string;
  tmpNode: TDomTreeNode;
  HtmlTxt: TStringList;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');
  FDomTreeNode.Parse(HtmlTxt.Text);
  tmpNode := FDomTreeNode.Child[3].child[1].child[3].child[1].child[0].child[0].child[0].child[1].child[0].child[0].child
    [0].child[0].child[0].child[1].child[1].child[0].child[3].child[1];
  ReturnValue := tmpNode.GetTextValue(0);
  CheckEquals('Draw 960', ReturnValue);
  ReturnValue := tmpNode.GetTextValue(1);
  CheckEquals('Draw 960', ReturnValue);
  ReturnValue := tmpNode.GetTextValue(2);
  CheckEquals('Thursday 9th October 2014', ReturnValue);
end;

procedure TestTDomTreeNode.TestGetComment;
var
  ReturnValue: string;
  tmpNode: TDomTreeNode;
  HtmlTxt: TStringList;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');
  FDomTreeNode.Parse(HtmlTxt.Text);
  tmpNode := FDomTreeNode.Child[3].child[1];
  ReturnValue := tmpNode.GetComment(0);
  CheckEquals('<!-- logo(s) -->', ReturnValue);
  ReturnValue := tmpNode.GetComment(1);
  CheckEquals('<!-- logo(s) -->', ReturnValue);
end;

procedure TestTDomTreeNode.TestFindNode;
var
  ReturnValue: Boolean;
  dListNode: TDomTreeNodeList;
  HtmlTxt: TStringList;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');
  FDomTreeNode.Parse(HtmlTxt.Text);
  dListNode := TDomTreeNodeList.Create;

  ReturnValue := FDomTreeNode.FindNode('', 0, 'id="maincontainer"', True, dListNode);
  CheckEquals(true, ReturnValue);
  CheckEquals('<div id="maincontainer">', dListNode[0].GetTagName);
  dListNode.Clear;

  ReturnValue := FDomTreeNode.FindNode('', 0, 'id="maincontainer"', false, dListNode);
  CheckEquals(false, ReturnValue);
  dListNode.Clear;

  ReturnValue := FDomTreeNode.FindNode('div', 0, 'id="TopBox"', True, dListNode);
  CheckEquals(true, ReturnValue);
  CheckEquals('<div id="TopBox">', dListNode[0].GetTagName);
  dListNode.Clear;

  ReturnValue := FDomTreeNode.FindNode('h1', 0, '', True, dListNode);
  CheckEquals(true, ReturnValue);
  CheckEquals('<h1 class="pageTitle logintitle">', dListNode[0].GetTagName);
  dListNode.Clear;
end;

procedure TestTDomTreeNode.TestFindTagOfIndex;
var
  ReturnValue: Boolean;
  dListNode: TDomTreeNodeList;
  tmpNode: TDomTreeNode;
  HtmlTxt: TStringList;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');
  FDomTreeNode.Parse(HtmlTxt.Text);
  dListNode := TDomTreeNodeList.Create;

  ReturnValue := FDomTreeNode.FindTagOfIndex('div', 2, false, dListNode);
  CheckEquals(false, ReturnValue);
  tmpNode := FDomTreeNode.Child[3].child[1].child[3].child[1].child[0].child[0].child[0].child[1].child[0].child[0].child
    [0].child[0].child[0].child[1].child[1].child[0].child[3];
  ReturnValue := tmpNode.FindTagOfIndex('div', 2, false, dListNode);
  CheckEquals(true, ReturnValue);
  CheckEquals('<div class="numbers">', dListNode[0].GetTagName);
end;

procedure TestTDomTreeNode.TestGetPath;
var
  ReturnValue: string;
  tmpNode: TDomTreeNode;
  HtmlTxt: TStringList;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');
  FDomTreeNode.Parse(HtmlTxt.Text);
  tmpNode := FDomTreeNode.Child[3].child[1].child[3].child[1].child[0].child[0].child[0].child[1].child[0].child[0].child
    [0].child[0].child[0].child[1].child[1].child[0].child[3];
  ReturnValue := tmpNode.GetPath(true);
  CheckEquals('//*[@id="TopBox"]/div/div/div/div[1]', ReturnValue);
  ReturnValue := tmpNode.GetPath(false);
  CheckEquals('./html/body/div/table/tbody/tr/td/table/tbody/tr/td/div/div/div/div/div/div[1]', ReturnValue);
end;

procedure TestTDomTreeNode.TestFindPath;
var
  ReturnValue: Boolean;
  dListValue: TStringList;
  dListNode: TDomTreeNodeList;
  HtmlTxt: TStringList;
begin
  HtmlTxt := TStringList.Create;
  HtmlTxt.LoadFromFile('test.html');
  FDomTreeNode.Parse(HtmlTxt.Text);

  dListNode := TDomTreeNodeList.Create;
  dListValue := TStringList.Create;
  ReturnValue := FDomTreeNode.FindPath('//*[@id="TopBox"]/div/div/div/div[1]', dListNode, dListValue);
  CheckEquals(true, ReturnValue);
  CheckEquals(1, dListNode.Count);
  CheckEquals('<div class="result_block result_13">', dListNode[0].GetTagName);

  dListNode.Clear;
  ReturnValue := FDomTreeNode.FindPath('//*[@id="TopBox"]/div/div/div/div/div[@class="draw default"]/text()[2]',
    dListNode, dListValue);
  CheckEquals(true, ReturnValue);
  CheckEquals(2, dListNode.Count);
  CheckEquals(2, dListValue.Count);
  CheckEquals('Thursday 9th October 2014', dListValue[0]);

  dListNode.Clear;
  dListValue.Clear;
  ReturnValue := FDomTreeNode.FindPath('//*[@id="TopBox"]/div/div/div/div/div[@class="numbers"]/table/tbody/tr[2]/td[1]/img[2]/@alt',
    dListNode, dListValue);
  CheckEquals(true, ReturnValue);
  CheckEquals(2, dListNode.Count);
  CheckEquals(2, dListValue.Count);
  CheckEquals('"35"', dListValue[0]);
  CheckEquals('"9"', dListValue[1]);
end;

procedure TestTChildList.SetUp;
begin
  FChildList := TDomTreeNodeList.Create;
end;

procedure TestTChildList.TearDown;
begin
  FChildList.Free;
  FChildList := nil;
end;

procedure TestTPrmRecList.SetUp;
begin
  FPrmRecList := TPrmRecList.Create;
end;

procedure TestTPrmRecList.TearDown;
begin
  FPrmRecList.Free;
  FPrmRecList := nil;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDomTree.Suite);
  RegisterTest(TestTDomTreeNode.Suite);
  RegisterTest(TestTChildList.Suite);
  RegisterTest(TestTPrmRecList.Suite);

end.

